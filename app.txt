from flask import Flask, render_template, request
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import io
import base64

app = Flask(__name__)

# Load the data into a pandas DataFrame and assign column names
df = pd.read_csv("templates/cardiovascular_data.csv", names=[
                 "age", "sex", "physical_activity", "bp", "cardiovascular_disease"], skiprows=1)

# Define a function to preprocess the data


def preprocess_data(df):
    # Convert non-numeric values in the "bp" column to 0
    df["bp"] = pd.to_numeric(df["bp"], errors="coerce").fillna(0)
    return df


# Preprocess the data
df = preprocess_data(df)

# Split the data into features and target
X = df.drop("cardiovascular_disease", axis=1)
y = df["cardiovascular_disease"]

# Train a random forest classifier
clf = RandomForestClassifier(n_estimators=100)

# Preprocess the data before training the model
X = preprocess_data(X)

clf.fit(X, y)

# Function to plot the graph and return it as a base64 encoded string


def plot_graph(df, prediction):
    fig, ax = plt.subplots()
    colors = ["red" if p == 1 else "green" for p in prediction]
    ax.scatter(df["age"], df["bp"], color=colors)
    ax.set_xlabel("Age")
    ax.set_ylabel("Blood Pressure")
    ax.set_title(
        "Correlation between Age, Blood Pressure and Cardiovascular Disease")
    # Convert the plot to a base64 encoded string
    img = io.BytesIO()
    fig.savefig(img, format="png")
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode()
    return plot_url

# Function to make a prediction based on user inputs and plot the graph


@app.route("/", methods=["POST"])
def predict():
    try:
        data = request.get_json()
        age = int(data["age"])
        sex = 1 if data["sex"] == "male" else 0
        physical_activity = float(data["physical_activity"])
        if "bp" in data:
            bp = int(data["bp"])  # Convert bp to an integer
        else:
            bp = 0  # Set a default value for bp
        inputs = np.array([[age, sex, physical_activity, bp]])

        # Preprocess the data before making predictions
        inputs = preprocess_data(pd.DataFrame(
            inputs, columns=X.columns)).values

        prediction = clf.predict(inputs)
        plot_url = plot_graph(df, prediction)
        return {"prediction": "High Likelihood of CVD" if prediction[0] == 1 else "Low Likelihood of CVD", "plot": plot_url}
    except Exception as e:
        return {"error": str(e)}


@app.route("/")
def index():
    # Initial plot when the page loads

    # Preprocess the data before making predictions for the initial plot
    X_preprocessed = preprocess_data(X)
    prediction = clf.predict(X_preprocessed)
    plot_url = plot_graph(df, prediction)
    return render_template("index.html", plot=plot_url)


if __name__ == "__main__":
    app.run(debug=True)
